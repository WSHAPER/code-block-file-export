/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeBlockFileExportPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultFileExtension: "txt",
  customLanguageMappings: "{}"
};
var CodeBlockFileExportPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // Map of language names to file extensions
    this.LANGUAGE_EXTENSIONS = {
      // JavaScript family
      "js": "js",
      "javascript": "js",
      "jsx": "jsx",
      "ts": "ts",
      "typescript": "ts",
      "tsx": "tsx",
      // Web languages
      "html": "html",
      "xml": "xml",
      "svg": "svg",
      "css": "css",
      "scss": "scss",
      "sass": "sass",
      "less": "less",
      "json": "json",
      // Server languages
      "php": "php",
      "py": "py",
      "python": "py",
      "rb": "rb",
      "ruby": "rb",
      "java": "java",
      "c": "c",
      "cpp": "cpp",
      "cs": "cs",
      "csharp": "cs",
      "go": "go",
      "rust": "rs",
      "swift": "swift",
      "kotlin": "kt",
      // Shell/scripting
      "bash": "sh",
      "shell": "sh",
      "sh": "sh",
      "zsh": "sh",
      "powershell": "ps1",
      "ps": "ps1",
      "ps1": "ps1",
      "bat": "bat",
      "cmd": "bat",
      // Data/config formats
      "yaml": "yaml",
      "yml": "yml",
      "toml": "toml",
      "ini": "ini",
      "csv": "csv",
      // Database
      "sql": "sql",
      "mysql": "sql",
      "pgsql": "sql",
      "postgresql": "sql",
      // Other
      "md": "md",
      "markdown": "md",
      "tex": "tex",
      "latex": "tex",
      "r": "r",
      "matlab": "m",
      "graphql": "graphql",
      "gql": "graphql",
      "dart": "dart",
      "dockerfile": "dockerfile"
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CodeBlockFileExportSettingTab(this.app, this));
    this.registerMarkdownPostProcessor((element) => {
      const codeBlocks = element.querySelectorAll("pre > code");
      codeBlocks.forEach((codeBlock) => {
        const pre = codeBlock.parentElement;
        if (!pre)
          return;
        const language = this.getLanguageFromCodeBlock(codeBlock);
        const exportButton = this.createExportButton(codeBlock, language);
        pre.appendChild(exportButton);
      });
    });
  }
  /**
   * Extract the language from a code block element and map it to appropriate file extension
   */
  getLanguageFromCodeBlock(codeBlock) {
    const classList = Array.from(codeBlock.classList);
    let language = this.settings.defaultFileExtension;
    for (const className of classList) {
      if (className.startsWith("language-")) {
        const langIdentifier = className.substring(9).toLowerCase();
        let customMappings = {};
        try {
          customMappings = JSON.parse(this.settings.customLanguageMappings);
        } catch (e) {
          console.error("Error parsing custom language mappings:", e);
        }
        if (customMappings[langIdentifier]) {
          language = customMappings[langIdentifier];
        } else if (this.LANGUAGE_EXTENSIONS[langIdentifier]) {
          language = this.LANGUAGE_EXTENSIONS[langIdentifier];
        } else {
          language = langIdentifier;
        }
        break;
      }
    }
    return language;
  }
  /**
   * Create an export button for a code block
   */
  createExportButton(codeBlock, language) {
    const exportButton = document.createElement("button");
    exportButton.setAttribute("aria-label", "Export to file");
    exportButton.classList.add("code-block-export-button");
    const iconContainer = document.createElement("div");
    iconContainer.classList.add("code-block-export-icon");
    iconContainer.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M4 18H20V20H4V18Z" fill="currentColor"/>
            <path d="M12 4L12 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <path d="M8 10L12 15L16 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;
    exportButton.appendChild(iconContainer);
    exportButton.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      const codeContent = codeBlock.textContent || "";
      const filename = this.createSuggestedFilename(codeContent, language);
      await this.exportCodeToFile(codeContent, filename);
    });
    return exportButton;
  }
  /**
   * Create a suggested filename based on the code content and language
   */
  createSuggestedFilename(codeContent, language) {
    const firstLine = codeContent.trim().split("\n")[0].trim();
    let name = "";
    if (firstLine.startsWith("function") || firstLine.includes("function ")) {
      const match = firstLine.match(/function\s+([a-zA-Z0-9_]+)/);
      if (match && match[1]) {
        name = match[1];
      }
    } else if (firstLine.startsWith("class") || firstLine.includes("class ")) {
      const match = firstLine.match(/class\s+([a-zA-Z0-9_]+)/);
      if (match && match[1]) {
        name = match[1];
      }
    }
    if (!name) {
      name = "code-block";
    }
    name = this.toKebabCase(name);
    return `${name}.${language}`;
  }
  /**
   * Convert a string to kebab-case
   */
  toKebabCase(str) {
    return str.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
  }
  /**
   * Export the code content to a file using browser download functionality
   */
  async exportCodeToFile(codeContent, filename) {
    try {
      const blob = new Blob([codeContent], { type: "text/plain" });
      const downloadLink = document.createElement("a");
      downloadLink.href = URL.createObjectURL(blob);
      downloadLink.download = filename;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
      setTimeout(() => {
        URL.revokeObjectURL(downloadLink.href);
      }, 100);
      new import_obsidian.Notice(`Code exported as ${filename}`);
    } catch (error) {
      console.error("Failed to export code to file:", error);
      new import_obsidian.Notice("Failed to export code to file: " + error.message);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var CodeBlockFileExportSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Code Block File Export Settings" });
    new import_obsidian.Setting(containerEl).setName("Default File Extension").setDesc("Default file extension to use when language cannot be detected").addText(
      (text) => text.setPlaceholder("txt").setValue(this.plugin.settings.defaultFileExtension).onChange(async (value) => {
        this.plugin.settings.defaultFileExtension = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Custom Language Mappings").setDesc("Add custom mappings from language names to file extensions (JSON format)").addTextArea((text) => {
      text.setPlaceholder('{"language": "extension", "custom": "ext"}').setValue(this.plugin.settings.customLanguageMappings).onChange(async (value) => {
        try {
          JSON.parse(value);
          this.plugin.settings.customLanguageMappings = value;
          await this.plugin.saveSettings();
          text.inputEl.removeClass("is-invalid");
        } catch (e) {
          text.inputEl.addClass("is-invalid");
        }
      });
      text.inputEl.addClass("code-block-export-json-input");
      text.inputEl.rows = 6;
    });
    containerEl.createEl("div", {
      cls: "setting-item-description code-block-export-info",
      text: "Code blocks will be exported using your browser's download functionality. Files will be saved to your default downloads location."
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
